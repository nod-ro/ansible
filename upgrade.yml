- hosts: localhost
  become: yes
  vars_files:
    - current_upgrade.yml
  pre_tasks:
    - name: Ensure main utils directory exists
      ansible.builtin.file:
        path: /var/ansible/utils
        state: directory
        mode: '0755'  # Set the permissions (optional)

    - name: Ensure SSH key is added to SSH agent
      shell: |
        eval $(ssh-agent -s)
        ssh-add /tmp/private_key
        echo "SSH_AUTH_SOCK=$SSH_AUTH_SOCK"
      register: ssh_agent_output
      ignore_errors: yes

    - name: Debug SSH agent output
      debug:
        var: ssh_agent_output.stdout_lines

    - name: Set environment variables for SSH agent
      set_fact:
        ssh_agent_socket: "{{ ssh_agent_output.stdout_lines[1].split('=')[1] }}"
        ssh_agent_pid: "{{ ssh_agent_output.stdout_lines[0].split(' ')[2] }}"
      when: ssh_agent_output is defined and ssh_agent_output.stdout_lines is defined and ssh_agent_output.stdout_lines | length > 1

  tasks:
    - name: Get list of currently active plugins
      command: "{{ wp_cli_path }} plugin list --status=active --field=name --allow-root"
      args:
        chdir: "{{ web_root }}/{{ development_domain }}"
      register: active_plugins_list
      changed_when: false
#    - name: Remove existing theme directories
#      ansible.builtin.file:
#        path: "{{ web_root }}/{{ development_domain }}/wp-content/themes/{{ item.name }}"
#        state: absent
#      loop: "{{ themes }}"
#      become: yes
#      become_user: root
#
#    - name: Check if theme directories exist
#      stat:
#        path: "{{ web_root }}/{{ development_domain }}/wp-content/themes/{{ item.name }}"
#      register: theme_directory_checks
#      loop: "{{ themes }}"
#
#    - name: Clone the themes repositories from private repos only if directory doesn't exist
#      git:
#        repo: "{{ item.item.repo }}"
#        dest: "{{ web_root }}/{{ development_domain }}/wp-content/themes/{{ item.item.name }}"
#        force: yes
#        version: "{{ item.item.version }}"
#        accept_hostkey: yes
#      loop: "{{ theme_directory_checks.results }}"
#      become: yes
#      become_user: root
#      ignore_errors: yes
#      environment:
#        SSH_AUTH_SOCK: "{{ ssh_agent_socket }}"
#        SSH_AGENT_PID: "{{ ssh_agent_pid }}"
#
#    - name: Switch to 'nod-electro-theme-child' theme
#      command: wp theme activate nod-electro-theme-child --path={{ web_root }}/{{ development_domain }} --allow-root
#      become: yes
#      become_user: root
#    - name: Check current WordPress version
#      command: "{{ wp_cli_path }} core version --allow-root"
#      args:
#        chdir: "{{ web_root }}/{{ development_domain }}"
#      register: wp_current_version
#      changed_when: false

#    - name: Upgrade WordPress to the specified version
#      command: "{{ wp_cli_path }} core update --version={{ wp_version }} --allow-root --force"
#      args:
#        chdir: "{{ web_root }}/{{ development_domain }}"
##      when: wp_current_version.stdout is version_compare(wp_version, '<')
#      notify: flush_rewrite_rules


    - name: Remove existing plugins directories
      ansible.builtin.file:
        path: "{{ web_root }}/{{ development_domain }}/wp-content/plugins/{{ item.name }}"
        state: absent
      loop: "{{ plugins }}"
      become: yes
      become_user: root
      ignore_errors: yes

    - name: Ensure plugins directory exists with correct permissions
      file:
        path: "{{ web_root }}/{{ development_domain }}/wp-content/plugins/{{ item.name }}"
        state: directory
        owner: root  # Replace with your web user, possibly www-data
        group: root  # Replace with your web group, possibly www-data
        mode: '0755'
      loop: "{{ plugins }}"
      become: yes  # Use sudo to ensure permissions
      ignore_errors: yes

    - name: Update WooCommerce to specified version
      become: yes
      become_user: root
      command: wp plugin update woocommerce --version={{ woocommerce_version }} --allow-root
      args:
        chdir: "{{ web_root }}/{{ development_domain }}"

    - name: Check if plugin directories are not empty
      find:
        paths: "{{ web_root }}/{{ development_domain }}/wp-content/plugins/{{ item.name }}"
        file_type: any
      register: plugin_directory_contents
      loop: "{{ plugins }}"
      ignore_errors: yes

    - name: Clone the plugin repositories from private repos only if directory is empty
      git:
        repo: "{{ item.item.repo }}"
        dest: "{{ web_root }}/{{ development_domain }}/wp-content/plugins/{{ item.item.name }}"
        force: yes
        version: "{{ item.item.version }}"
        accept_hostkey: yes
      when: item.files | length == 0
      loop: "{{ plugin_directory_contents.results }}"
      become: yes
      become_user: root
      ignore_errors: yes
      environment:
        SSH_AUTH_SOCK: "{{ ssh_agent_socket }}"
        SSH_AGENT_PID: "{{ ssh_agent_pid }}"

    - name: Upgrade and conditionally activate WooCommerce public plugins
      command: wp plugin install {{ item.name }} --version={{ item.version }} --path={{ web_root }}/{{ development_domain }} --allow-root --force
      with_items: "{{ public_plugins }}"
      ignore_errors: yes

    - name: Clone or update the plugin repositories from private repos
      git:
        repo: "{{ item.item.repo }}"
        dest: "{{ web_root }}/{{ development_domain }}/wp-content/plugins/{{ item.item.name }}"
        force: yes
        version: "{{ item.item.version }}"
        accept_hostkey: yes
      loop: "{{ plugin_directory_contents.results }}"
      become: yes
      become_user: root
      ignore_errors: yes
      environment:
        SSH_AUTH_SOCK: "{{ ssh_agent_socket }}"
        SSH_AGENT_PID: "{{ ssh_agent_pid }}"

    - name: Reactivate previously active plugins
      command: "{{ wp_cli_path }} plugin activate {{ item }} --allow-root"
      args:
        chdir: "{{ web_root }}/{{ development_domain }}"
      loop: "{{ active_plugins_list.stdout_lines }}"
      when: active_plugins_list.stdout_lines is defined

    - name: Change ownership of web directory
      become: yes  # to become superuser
      no_log: true
      ansible.builtin.file:
        path: "/var/www/{{ development_domain }}"
        owner: www-data
        group: www-data
        recurse: yes  # to operate recursively

  handlers:
    - name: flush_rewrite_rules
      command: "{{ wp_cli_path }} rewrite flush --allow-root"
      args:
        chdir: "{{ web_root }}/{{ development_domain }}"